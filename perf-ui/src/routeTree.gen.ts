/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as FeedIndexImport } from './routes/feed/index'
import { Route as FeedIdImport } from './routes/feed/$id'
import { Route as ProtectedPreferencesImport } from './routes/_protected/preferences'

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FeedIndexRoute = FeedIndexImport.update({
  id: '/feed/',
  path: '/feed/',
  getParentRoute: () => rootRoute,
} as any)

const FeedIdRoute = FeedIdImport.update({
  id: '/feed/$id',
  path: '/feed/$id',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedPreferencesRoute = ProtectedPreferencesImport.update({
  id: '/preferences',
  path: '/preferences',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_protected/preferences': {
      id: '/_protected/preferences'
      path: '/preferences'
      fullPath: '/preferences'
      preLoaderRoute: typeof ProtectedPreferencesImport
      parentRoute: typeof ProtectedImport
    }
    '/feed/$id': {
      id: '/feed/$id'
      path: '/feed/$id'
      fullPath: '/feed/$id'
      preLoaderRoute: typeof FeedIdImport
      parentRoute: typeof rootRoute
    }
    '/feed/': {
      id: '/feed/'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof FeedIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedPreferencesRoute: typeof ProtectedPreferencesRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedPreferencesRoute: ProtectedPreferencesRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/preferences': typeof ProtectedPreferencesRoute
  '/feed/$id': typeof FeedIdRoute
  '/feed': typeof FeedIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/preferences': typeof ProtectedPreferencesRoute
  '/feed/$id': typeof FeedIdRoute
  '/feed': typeof FeedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/preferences': typeof ProtectedPreferencesRoute
  '/feed/$id': typeof FeedIdRoute
  '/feed/': typeof FeedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/preferences' | '/feed/$id' | '/feed'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/preferences' | '/feed/$id' | '/feed'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/preferences'
    | '/feed/$id'
    | '/feed/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  FeedIdRoute: typeof FeedIdRoute
  FeedIndexRoute: typeof FeedIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  FeedIdRoute: FeedIdRoute,
  FeedIndexRoute: FeedIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/_protected",
        "/feed/$id",
        "/feed/"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/_protected": {
      "filePath": "_protected.jsx",
      "children": [
        "/_protected/preferences"
      ]
    },
    "/_protected/preferences": {
      "filePath": "_protected/preferences.jsx",
      "parent": "/_protected"
    },
    "/feed/$id": {
      "filePath": "feed/$id.jsx"
    },
    "/feed/": {
      "filePath": "feed/index.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
